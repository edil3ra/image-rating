* Introduction
  Image-rating is a small application where anybody can upload images and rate they favorite ones

* Install  
  npm install -- install dependencies
  npm start -- for developing
  npm run prod -- for production 

* database fetch
  node server/index.js (launch the node server)
  python generate_db.py (fill the database with random values need python)
  python generate_store.py (fill the database with random values need python)



* Technical side
** backend
*** express
	I choose express to store images and informations on them, express is a very good choice for a small app like this.
	The database is one json file, I used locki to store collection to my db.
	In a real app mongo should be used, bot for now file persintig database is good engough.
	Image are sorted in locals.
	The image hame no processing except for the checking of file type.
	In real app i will used a service like cloudinary or create my own processing image service.
  

** front
*** Materialize
   I Choose materialize because, it is one of the fastest way to get a good looking web app without too much work
*** React
   I choose react because it's a good choice for small project like this.
   I took 2 react library to create the the dropzone and to display the image
*** Redux
   I choose redux to manage all the state of the app, it's overkill for smal project but redux is really convenient to manage states

* helpers
** actions
store.dispatch(actions.addImage({id: 11, filename: 'filename', originalname: 'originalname', rate: [], timestamp: 100}))

store.dispatch(actions.updateImage({id: 11, filename: 'filenameUpdate', originalname: 'originalnameUpdate', rate: [1, 2], timestamp: 100}))

store.dispatch(actions.fetchImages())
store.dispatch(actions.fetchImage(1))
store.dispatch(actions.fetchPostImage(id: 1, rates:[1, 2, 3, 4, 19, 2, 3]))
store.dispatch(actions.fetchPutImage(id: 1, rates:[1, 2, 3, 4, 19, 2, 3]))




** api test with httpie
   http post :8080/api/images image@./images_mock/24888793474_0c72120d22_m.jpg --form && http post :8080/api/images image@./images_mock/36674393256_0bf9e8b68f_m.jpg --form && http post :8080/api/images image@./images_mock/4618786477_b6cea108fb_z.jpg --form && http post :8080/api/images image@./images_mock/35909960083_468dfe33d4_z.jpg --form && http post :8080/api/images image@./images_mock/36674393436_4ea3a9bc5b_z.jpg --form && http post :8080/api/images image@./images_mock/5503173238_061a4e233d_m.jpg --form && http post :8080/api/images image@./images_mock/36325395070_6c23299b43_z.jpg --form && http post :8080/api/images image@./images_mock/36676372256_9357fd5f04_z.jpg --form && http post :8080/api/images image@./images_mock/36585352871_2095afa289_m.jpg --form && http post :8080/api/images image@./images_mock/36677993176_07857a65fd_z.jpg --form

 http post :8080/api/images image@./images_mock/24888793474_0c72120d22_m.jpg

   http get :3000/api/images 
   http get :3000/api/images/1/stream
   http get :3000/api/images/1
   http put :3000/api/images/1 rates:='[1, 3, 4, 2]'
   http delete :3000/api/images/1
   http post :3000/api/images image@~/Downloads/05db7df4f31840f0a873d6ea14dcc28d.pdf --form (should send 400)
  


