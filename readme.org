* Introduction
  Image-rating is a small application where anybody can upload images and rate they favorite ones.
  The application is in beta and will considerably change if I keep working on it
  

* Install  
  npm install -- install dependencies
  npm start -- for developing
  npm run prod -- for production 
  node server/index.js -- to run the server in production

* Command to fill the database with images and rates them
  node server/index.js (launch the node server)
  python generate_db.py (fill the database with random values need python)



* Technical side
** backend
*** express
	I choosed express for the server to create a small restfull api and store files, it's a good choice for a small application like this.
	The database is one json file, I used locki to store collection to my db.
	There is no processing on the images, so somebody could drop a 1G file.
	In a real app, a service like cloudinary should be used to store files.
  
** front
*** Materialize
   I picked materialize, it is one of the fastest way to get a good looking web app without too much work.

*** React
   I choosed react, it's a very good to create web app.
   The dropzone is handle through a react-dropzone.
   All react components are statless.
   states are managed through react-redux (small library to link state to props)

*** Redux
   I choose redux to manage all the state of the app, it's overkill for smal project like this but redux is really good to manage external state.
   I used redux-thunk to handle api call
   


* Evolution
  I planning to do a component that propose an image to the user and let him rated, so he doesn't have to browse what he want to rated or not.
  The user will have a tempory profile where he can upload one image.
  anonymous user will rated other anonymous user image.
  anonmyous user profile will be updated as soon as someone rated there image.

* helpers
** actions
   store.dispatch(actions.addImage({id: 11, filename: 'filename', originalname: 'originalname', rate: [], timestamp: 100}))

   store.dispatch(actions.updateImage({id: 11, filename: 'filenameUpdate', originalname: 'originalnameUpdate', rate: [1, 2], timestamp: 100}))

   store.dispatch(actions.fetchImages())
   store.dispatch(actions.fetchImage(1))
   store.dispatch(actions.fetchPostImage(id: 1, rates:[1, 2, 3, 4, 19, 2, 3]))
   store.dispatch(actions.fetchPutImage(id: 1, rates:[1, 2, 3, 4, 19, 2, 3]))




** api test with httpie
   http post :8080/api/images image@./images_mock/24888793474_0c72120d22_m.jpg
   http get :3000/api/images 
   http get :3000/api/images/1/stream
   http get :3000/api/images/1
   http put :3000/api/images/1 rates:='[1, 3, 4, 2]'
   http delete :3000/api/images/1
  


